#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Liquider
  class GeneratedParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
   119,   119,   119,   119,   123,    55,    67,   149,     8,   140,
    17,    67,    67,   127,   141,   139,     7,   128,    55,   115,
   114,   113,   120,   120,   120,   120,    18,    98,    68,     8,
    19,    17,    20,    68,    68,    21,    80,     7,   122,    22,
    23,    81,   121,   121,   121,   121,     8,    18,    17,    55,
    82,    19,    84,    20,     7,   130,    21,     8,    55,    17,
    22,    23,    65,    66,    18,     7,   132,    73,    19,   133,
    20,    54,     8,    21,    17,    18,    53,    22,    23,    19,
     7,    20,    24,     8,    21,    17,    52,   140,    22,    23,
    18,     7,   141,   139,    19,   142,    20,    96,     8,    21,
    17,    18,    51,    22,    23,    19,     7,    20,    79,     8,
    21,    17,    63,    64,    22,    23,    18,     7,    63,    64,
    19,   103,    20,   145,     8,    21,    17,    18,    78,    22,
    23,    19,     7,    20,    77,     8,    21,    17,     3,     4,
    22,    23,    18,     7,    63,    64,    19,   106,    20,    47,
     8,    21,    17,    18,    76,    22,    23,    19,     7,    20,
   110,     8,    21,    17,    63,    64,    22,    23,    18,     7,
    63,    64,    19,    75,    20,    63,    64,    21,    72,    18,
   111,    22,    23,    19,    72,    20,    63,    64,    21,    37,
    63,    64,    22,    23,    39,    34,    33,    35,    36,    37,
   115,   114,   113,    70,    32,    34,    33,    35,    36,    37,
    65,    66,    65,    66,    39,    34,    33,    35,    36,    37,
   116,   148,    71,    70,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    39,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    37,
   nil,   nil,   nil,   nil,    32,    34,    33,    35,    36,    56,
    57,    58,    59,    60,    61,    62 ]

racc_action_check = [
   107,   136,   121,   119,   109,    69,    94,   147,    82,   134,
    82,    95,    30,   117,   134,   134,    82,   118,   108,   104,
   104,   104,   107,   136,   121,   119,    82,    69,    94,    78,
    82,    78,    82,    95,    30,    82,    51,    78,   108,    82,
    82,    52,   107,   136,   121,   119,    77,    78,    77,    45,
    53,    78,    55,    78,    77,   120,    78,   133,    25,   133,
    78,    78,    29,    29,    77,   133,   125,    45,    77,   126,
    77,    24,   128,    77,   128,   133,    23,    77,    77,   133,
   128,   133,     1,   127,   133,   127,    22,   150,   133,   133,
   128,   127,   150,   150,   128,   135,   128,    67,   145,   128,
   145,   127,    21,   128,   128,   127,   145,   127,    50,   114,
   127,   114,    28,    28,   127,   127,   145,   114,    85,    85,
   145,    72,   145,   140,     0,   145,     0,   114,    49,   145,
   145,   114,     0,   114,    48,     5,   114,     5,     0,     0,
   114,   114,     0,     5,    86,    86,     0,    79,     0,    17,
   148,     0,   148,     5,    47,     0,     0,     5,   148,     5,
    84,    16,     5,    16,    87,    87,     5,     5,   148,    16,
    88,    88,   148,    46,   148,    89,    89,   148,    41,    16,
    97,   148,   148,    16,   100,    16,    90,    90,    16,   110,
    91,    91,    16,    16,   110,   110,   110,   110,   110,     3,
   137,   137,   137,   103,     3,     3,     3,     3,     3,     4,
    92,    92,    93,    93,     4,     4,     4,     4,     4,     8,
   105,   146,    40,    39,     8,     8,     8,     8,     8,    18,
   nil,   nil,   nil,   nil,    18,    18,    18,    18,    18,    19,
   nil,   nil,   nil,   nil,    19,    19,    19,    19,    19,    20,
   nil,   nil,   nil,   nil,    20,    20,    20,    20,    20,    37,
   nil,   nil,   nil,   nil,    37,    37,    37,    37,    37,    56,
   nil,   nil,   nil,   nil,    56,    56,    56,    56,    56,    57,
   nil,   nil,   nil,   nil,    57,    57,    57,    57,    57,    58,
   nil,   nil,   nil,   nil,    58,    58,    58,    58,    58,    59,
   nil,   nil,   nil,   nil,    59,    59,    59,    59,    59,    60,
   nil,   nil,   nil,   nil,    60,    60,    60,    60,    60,    61,
   nil,   nil,   nil,   nil,    61,    61,    61,    61,    61,    62,
   nil,   nil,   nil,   nil,    62,    62,    62,    62,    62,    63,
   nil,   nil,   nil,   nil,    63,    63,    63,    63,    63,    64,
   nil,   nil,   nil,   nil,    64,    64,    64,    64,    64,    65,
   nil,   nil,   nil,   nil,    65,    65,    65,    65,    65,    66,
   nil,   nil,   nil,   nil,    66,    66,    66,    66,    66,    68,
   nil,   nil,   nil,   nil,    68,    68,    68,    68,    68,    70,
   nil,   nil,   nil,   nil,    70,    70,    70,    70,    70,    71,
   nil,   nil,   nil,   nil,    71,    71,    71,    71,    71,    80,
   nil,   nil,   nil,   nil,    80,    80,    80,    80,    80,    81,
   nil,   nil,   nil,   nil,    81,    81,    81,    81,    81,   106,
   nil,   nil,   nil,   nil,   106,   106,   106,   106,   106,   115,
   nil,   nil,   nil,   nil,   115,   115,   115,   115,   115,   130,
   nil,   nil,   nil,   nil,   130,   130,   130,   130,   130,   141,
   nil,   nil,   nil,   nil,   141,   141,   141,   141,   141,    26,
    26,    26,    26,    26,    26,    26 ]

racc_action_pointer = [
   105,    82,   nil,   176,   186,   116,   nil,   nil,   196,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   142,   114,   206,   216,
   226,    74,    58,    48,    71,    56,   457,   nil,   103,    55,
     9,   nil,   nil,   nil,   nil,   nil,   nil,   236,   nil,   218,
   216,   172,   nil,   nil,   nil,    47,   137,   132,   112,   106,
    86,   -11,    30,    28,   nil,    24,   246,   256,   266,   276,
   286,   296,   306,   316,   326,   336,   346,    69,   356,     3,
   366,   376,    93,   nil,   nil,   nil,   nil,    27,    10,   103,
   386,   396,   -11,   nil,   155,   109,   135,   155,   161,   166,
   177,   181,   203,   205,     3,     8,   nil,   154,   nil,   nil,
   178,   nil,   nil,   198,   -19,   178,   406,    -6,    16,   -48,
   166,   nil,   nil,   nil,    90,   416,   nil,    -9,    -5,    -3,
    50,    -4,   nil,   nil,   nil,    26,    47,    64,    53,   nil,
   426,   nil,   nil,    38,   -30,    46,    -5,   162,   nil,   nil,
   101,   436,   nil,   nil,   nil,    79,   199,   -38,   131,   nil,
    48,   nil ]

racc_action_default = [
    -4,   -73,    -1,   -73,   -39,    -5,    -6,    -8,   -73,   -10,
   -48,   -49,   -50,   -51,   -52,   -53,    -4,   -73,   -73,   -73,
   -73,   -73,   -73,   -73,   -73,    -2,   -11,   -12,   -16,   -24,
   -27,   -30,   -33,   -34,   -35,   -36,   -37,   -73,    -3,   -33,
   -40,   -41,   -43,   -45,    -7,   -73,   -73,   -73,   -73,   -73,
   -73,   -73,   -73,   -73,   152,   -73,   -73,   -73,   -73,   -73,
   -73,   -73,   -73,   -73,   -73,   -73,   -73,   -73,   -73,   -73,
   -73,   -73,   -73,    -9,   -54,   -56,   -55,    -4,    -4,   -73,
   -73,   -73,    -4,   -13,   -14,   -17,   -18,   -19,   -20,   -21,
   -22,   -23,   -25,   -26,   -28,   -29,   -31,   -73,   -38,   -47,
   -42,   -44,   -46,   -73,   -73,   -73,   -73,   -67,   -73,   -73,
   -39,   -32,   -57,   -58,    -4,   -73,   -61,   -73,   -73,   -67,
   -73,   -67,   -71,   -72,   -15,   -73,   -73,    -4,    -4,   -68,
   -73,   -70,   -59,    -4,   -73,   -73,   -67,   -73,   -62,   -63,
   -73,   -73,   -66,   -69,   -60,    -4,   -73,   -73,    -4,   -64,
   -73,   -65 ]

racc_goto_table = [
     2,    38,   112,    25,    42,   100,   138,   102,    45,   118,
    92,    93,    94,    95,    74,     1,    46,    83,    48,    49,
    50,   129,   151,   131,    85,    86,    87,    88,    89,    90,
    91,    44,   nil,   nil,   nil,   144,   nil,    69,   143,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    97,   nil,
    99,   101,   nil,   nil,   nil,   nil,   nil,   104,   105,   nil,
   107,   108,   109,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   117,   124,   nil,   nil,
    42,   nil,   nil,   nil,   125,   126,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   134,   135,   nil,
   136,   nil,   nil,   137,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   146,   nil,   nil,   nil,   147,   nil,   nil,   150 ]

racc_goto_check = [
     2,     4,    26,     3,     8,    16,    27,    17,     3,    28,
    12,    12,    13,    13,    25,     1,     2,    10,     8,     8,
     8,    28,    27,    28,    11,    11,    11,    11,    11,    11,
    11,     6,   nil,   nil,   nil,    26,   nil,     3,    28,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,   nil,
     8,     8,   nil,   nil,   nil,   nil,   nil,     2,     2,   nil,
     8,     3,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     8,     4,   nil,   nil,
     8,   nil,   nil,   nil,     2,     8,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,     2,   nil,
     8,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     8,   nil,   nil,   nil,     2,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,    15,     0,     0,    -3,   nil,    26,   nil,     0,   nil,
   -38,   -32,   -53,   -53,   nil,   nil,   -66,   -65,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -32,  -102,  -128,   -98 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     5,     6,     9,    27,    26,
   nil,    28,    29,    30,    31,    40,    41,    43,    10,    11,
    12,    13,    14,    15,    16,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 54, :_reduce_none,
  2, 54, :_reduce_2,
  2, 54, :_reduce_3,
  0, 55, :_reduce_4,
  1, 55, :_reduce_5,
  1, 58, :_reduce_none,
  2, 58, :_reduce_7,
  1, 59, :_reduce_8,
  3, 59, :_reduce_9,
  1, 59, :_reduce_none,
  1, 61, :_reduce_none,
  1, 56, :_reduce_none,
  3, 56, :_reduce_13,
  1, 63, :_reduce_14,
  3, 63, :_reduce_15,
  1, 62, :_reduce_none,
  3, 62, :_reduce_17,
  3, 62, :_reduce_18,
  3, 62, :_reduce_19,
  3, 62, :_reduce_20,
  3, 62, :_reduce_21,
  3, 62, :_reduce_22,
  3, 62, :_reduce_23,
  1, 64, :_reduce_none,
  3, 64, :_reduce_25,
  3, 64, :_reduce_26,
  1, 65, :_reduce_none,
  3, 65, :_reduce_28,
  3, 65, :_reduce_29,
  1, 66, :_reduce_none,
  3, 66, :_reduce_31,
  4, 66, :_reduce_32,
  1, 67, :_reduce_33,
  1, 67, :_reduce_34,
  1, 67, :_reduce_35,
  1, 67, :_reduce_36,
  1, 67, :_reduce_37,
  3, 67, :_reduce_38,
  0, 57, :_reduce_39,
  1, 57, :_reduce_40,
  1, 57, :_reduce_41,
  3, 57, :_reduce_42,
  1, 68, :_reduce_43,
  3, 68, :_reduce_44,
  1, 69, :_reduce_45,
  3, 69, :_reduce_46,
  3, 70, :_reduce_47,
  1, 60, :_reduce_none,
  1, 60, :_reduce_none,
  1, 60, :_reduce_none,
  1, 60, :_reduce_none,
  1, 60, :_reduce_none,
  1, 60, :_reduce_none,
  3, 60, :_reduce_54,
  3, 77, :_reduce_55,
  1, 78, :_reduce_56,
  5, 71, :_reduce_57,
  1, 79, :_reduce_58,
  3, 79, :_reduce_59,
  5, 79, :_reduce_60,
  5, 72, :_reduce_61,
  8, 73, :_reduce_62,
  1, 80, :_reduce_63,
  4, 80, :_reduce_64,
  5, 80, :_reduce_65,
  8, 74, :_reduce_66,
  0, 81, :_reduce_67,
  2, 81, :_reduce_68,
  4, 81, :_reduce_69,
  2, 81, :_reduce_70,
  5, 75, :_reduce_71,
  5, 76, :_reduce_72 ]

racc_reduce_n = 73

racc_shift_n = 152

racc_token_table = {
  false => 0,
  :error => 1,
  :PIPE => 2,
  :DOT => 3,
  :DOTDOT => 4,
  :COLON => 5,
  :COMMA => 6,
  :TIMES => 7,
  :DIV => 8,
  :PLUS => 9,
  :MINUS => 10,
  :EQ => 11,
  :EQEQ => 12,
  :NE => 13,
  :LT => 14,
  :LE => 15,
  :GT => 16,
  :GE => 17,
  :CONTAINS => 18,
  :MUSTACHEOPEN => 19,
  :MUSTACHECLOSE => 20,
  :TAGOPEN => 21,
  :TAGCLOSE => 22,
  :PARENOPEN => 23,
  :PARENCLOSE => 24,
  :BRACKETOPEN => 25,
  :BRACKETCLOSE => 26,
  :TEXT => 27,
  :IDENT => 28,
  :NUMBER => 29,
  :STRING => 30,
  :TRUE => 31,
  :FALSE => 32,
  :GOTOEXPRESSION => 33,
  :GOTOARGLIST => 34,
  :MARKUP => 35,
  :ENDBLOCK => 36,
  :IF => 37,
  :ELSIF => 38,
  :ELSE => 39,
  :ENDIF => 40,
  :UNLESS => 41,
  :ENDUNLESS => 42,
  :CASE => 43,
  :WHEN => 44,
  :ENDCASE => 45,
  :FOR => 46,
  :IN => 47,
  :REVERSED => 48,
  :ENDFOR => 49,
  :ASSIGN => 50,
  :CAPTURE => 51,
  :ENDCAPTURE => 52 }

racc_nt_base = 53

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "PIPE",
  "DOT",
  "DOTDOT",
  "COLON",
  "COMMA",
  "TIMES",
  "DIV",
  "PLUS",
  "MINUS",
  "EQ",
  "EQEQ",
  "NE",
  "LT",
  "LE",
  "GT",
  "GE",
  "CONTAINS",
  "MUSTACHEOPEN",
  "MUSTACHECLOSE",
  "TAGOPEN",
  "TAGCLOSE",
  "PARENOPEN",
  "PARENCLOSE",
  "BRACKETOPEN",
  "BRACKETCLOSE",
  "TEXT",
  "IDENT",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "GOTOEXPRESSION",
  "GOTOARGLIST",
  "MARKUP",
  "ENDBLOCK",
  "IF",
  "ELSIF",
  "ELSE",
  "ENDIF",
  "UNLESS",
  "ENDUNLESS",
  "CASE",
  "WHEN",
  "ENDCASE",
  "FOR",
  "IN",
  "REVERSED",
  "ENDFOR",
  "ASSIGN",
  "CAPTURE",
  "ENDCAPTURE",
  "$start",
  "Liquid",
  "Document",
  "PipeExpression",
  "ArgList",
  "DocumentElementList",
  "DocumentElement",
  "Block",
  "Expression",
  "ComparisonExpression",
  "Filter",
  "AdditiveExpression",
  "MultiplicativeExpression",
  "CallExpression",
  "PrimaryExpression",
  "PosArgList",
  "OptArgList",
  "OptArg",
  "IfStatement",
  "UnlessStatement",
  "CaseStatement",
  "ForStatement",
  "AssignStatement",
  "CaptureStatement",
  "BlockHead",
  "BlockTail",
  "IfContinuation",
  "CaseContinuation",
  "ForOptions" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'liquid.y', 24)
  def _reduce_2(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 25)
  def _reduce_3(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 29)
  def _reduce_4(val, _values, result)
     result = Ast::DocumentNode.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 30)
  def _reduce_5(val, _values, result)
     result = Ast::DocumentNode.new([val].flatten) 
    result
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'liquid.y', 35)
  def _reduce_7(val, _values, result)
     result = val.flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 39)
  def _reduce_8(val, _values, result)
     result = Ast::TextNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 40)
  def _reduce_9(val, _values, result)
     result = Ast::MustacheNode.new(val[1]) 
    result
  end
.,.,

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'liquid.y', 51)
  def _reduce_13(val, _values, result)
          result = val[2]
      result.arg_list.positionals.unshift(val[0])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 57)
  def _reduce_14(val, _values, result)
     result = Ast::FilterNode.new(val[0], Ast::ArgListNode.new([], [])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 58)
  def _reduce_15(val, _values, result)
     result = Ast::FilterNode.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'liquid.y', 63)
  def _reduce_17(val, _values, result)
     result = Ast::BinOpNode.new(:==, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 64)
  def _reduce_18(val, _values, result)
     result = Ast::BinOpNode.new(:!=, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 65)
  def _reduce_19(val, _values, result)
     result = Ast::BinOpNode.new(:<, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 66)
  def _reduce_20(val, _values, result)
     result = Ast::BinOpNode.new(:<=, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 67)
  def _reduce_21(val, _values, result)
     result = Ast::BinOpNode.new(:>, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 68)
  def _reduce_22(val, _values, result)
     result = Ast::BinOpNode.new(:>=, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 69)
  def _reduce_23(val, _values, result)
     result = Ast::BinOpNode.new(:contains, val[0], val[2]) 
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'liquid.y', 74)
  def _reduce_25(val, _values, result)
     result = Ast::BinOpNode.new(:+, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 75)
  def _reduce_26(val, _values, result)
     result = Ast::BinOpNode.new(:-, val[0], val[2]) 
    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'liquid.y', 80)
  def _reduce_28(val, _values, result)
     result = Ast::BinOpNode.new(:*, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 81)
  def _reduce_29(val, _values, result)
     result = Ast::BinOpNode.new(:'/', val[0], val[2]) 
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'liquid.y', 86)
  def _reduce_31(val, _values, result)
     result = Ast::CallNode.new(val[0], Ast::SymbolNode.new(val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 87)
  def _reduce_32(val, _values, result)
     result = Ast::IndexNode.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 91)
  def _reduce_33(val, _values, result)
     result = Ast::SymbolNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 92)
  def _reduce_34(val, _values, result)
     result = Ast::StringNode.new(val[0][1...-1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 93)
  def _reduce_35(val, _values, result)
     result = Ast::NumberNode.new(val[0].to_i) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 94)
  def _reduce_36(val, _values, result)
     result = Ast::BooleanNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 95)
  def _reduce_37(val, _values, result)
     result = Ast::BooleanNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 96)
  def _reduce_38(val, _values, result)
     result = Ast::ParenthesisedNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 100)
  def _reduce_39(val, _values, result)
     result = Ast::ArgListNode.new([], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 101)
  def _reduce_40(val, _values, result)
     result = Ast::ArgListNode.new(val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 102)
  def _reduce_41(val, _values, result)
     result = Ast::ArgListNode.new([], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 103)
  def _reduce_42(val, _values, result)
     result = Ast::ArgListNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 107)
  def _reduce_43(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 108)
  def _reduce_44(val, _values, result)
     result = [val[0], val[2]].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 112)
  def _reduce_45(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 114)
  def _reduce_46(val, _values, result)
          opt_arg_list, _, opt_arg = val
      if opt_arg_list.map(&:key).include?(opt_arg.key)
        raise LiquiderSyntaxError.new(%Q<Duplicate key "#{opt_arg.key}" in option list.>)
      end
      result = val[0] + [val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 123)
  def _reduce_47(val, _values, result)
     result = Ast::OptionPairNode.new(val[0].chomp(':'), val[2]) 
    result
  end
.,.,

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'liquid.y', 134)
  def _reduce_54(val, _values, result)
          head, document, tail = val
      unless head.tag_name == tail.tag_name
        raise LiquiderSyntaxError.new(%Q<Expected "{% end#{head.tag_name} %}", but found "{% end#{tail.tag_name} %}".>)
      end
      tag_class = tags[head.tag_name]
      parsed_markup = tag_class.parse_markup(head.markup)
      result = Ast::TagNode.new(tag_class.new(parsed_markup, document))
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 146)
  def _reduce_55(val, _values, result)
          tag_head, markup, _ = val
      tag_name = tag_head.gsub(/\{%\s*/, '')
      inject_token([:ENDBLOCK, "{%end#{tag_name}%}"]) unless tag_with_name(tag_name).block?
      result = BlockHead.new(tag_name, markup)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 154)
  def _reduce_56(val, _values, result)
     result = BlockTail.from_token(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 159)
  def _reduce_57(val, _values, result)
          _, head, _, document, continuation = *val
      result = Ast::IfNode.new(head, document, continuation)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 166)
  def _reduce_58(val, _values, result)
          result = Ast::NullNode.new
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 169)
  def _reduce_59(val, _values, result)
          _, body, _ = *val
      result = Ast::ElseNode.new(body)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 173)
  def _reduce_60(val, _values, result)
          _, head, _, body, continuation = *val
      result = Ast::IfNode.new(head, body, continuation)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 180)
  def _reduce_61(val, _values, result)
          _, head, _, body, _ = *val
      result = Ast::IfNode.new(Ast::NegationNode.new(head), body, Ast::NullNode.new)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 187)
  def _reduce_62(val, _values, result)
          _, head, _, _, first_case, _, first_value, rest = *val
      result = Ast::CaseNode.new(head, [WhenNode.new(first_case, first_value), *rest])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 193)
  def _reduce_63(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 194)
  def _reduce_64(val, _values, result)
     result = [CaseElseNode.new(val[2])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 195)
  def _reduce_65(val, _values, result)
     result = [WhenNode.new(val[1], val[3]), *val[4]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 200)
  def _reduce_66(val, _values, result)
          _, binding, _, expression, options, _, body, _ = *val
      result = Ast::ForNode.new(Ast::SymbolNode.new(binding), expression, body, **options)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 206)
  def _reduce_67(val, _values, result)
     result = {} 
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 208)
  def _reduce_68(val, _values, result)
          _, options = *val
      result = options
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 212)
  def _reduce_69(val, _values, result)
          keyword, _, value, options = *val
      result = case keyword
      when 'limit'
        if options.has_key?(:limit)
          raise LiquiderSyntaxError.new("'limit' was specified multiple times on 'for' tag.")
        end
        options.merge(limit: value)
      when 'offset'
        if options.has_key?(:offset)
          raise LiquiderSyntaxError.new("'offset' was specified multiple times on 'for' tag.")
        end
        options.merge(offset: value)
      else raise LiquiderSyntaxError.new("Unknown 'for' loop option '#{keyword}'.")
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 228)
  def _reduce_70(val, _values, result)
          _, options = *val
      if options.has_key?(:reversed)
        raise LiquiderSyntaxError.new("'reversed' was specified multiple times on 'for' tag.")
      end
      result = options.merge(reversed: Ast::BooleanNode.new(true))
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 238)
  def _reduce_71(val, _values, result)
          _, binding, _, value = *val
      result = Ast::AssignNode.new(Ast::SymbolNode.new(binding), value)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'liquid.y', 245)
  def _reduce_72(val, _values, result)
          _, binding, _, document, _ = *val
      result = Ast::CaptureNode.new(Ast::SymbolNode.new(binding), document)
    
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class GeneratedParser
  end   # module Liquider
